Operatory są symbolami wykonania działań na danych.
Podział operatorów
Arytmetyczne 	+. -.*, /, **, %, //
Relacyjne 	<, <=, >, >=, !=, ==
Logiczne 	or, and, not
Bitowe 	|, &, ^, ~, <<, >>
Przynależności 	in, not in
Tożsamości 	is, is not

 
Ważność operatorów

Określa kolejność wykorzystania operatora (kolejność wykonywania działań). Im wyżej w tabeli – tym ważniejszy.
Operator 	Opis
** 	potęga
~, +, – 	bitowa inwersja, symbol dodatnia, symbol ujemna
*, /, %, // 	iloczyn, iloraz, reszta z dzielenia, dzielenie całkowite
+, – 	suma, różnica
>>, << 	przesunięcia bitowe
& 	bitowe AND
^ ,| 	bitowe XOR, bitowe OR
<=, < ,> ,>= 	mniejszy lub równy, mniejszy, większy, większy lub równy
<> ,== ,!= 	różny, równy, różny
= ,%= ,/= ,//= ,-= ,+= ,*=, **= 	operatory przypisania
is , is not 	operatory tożsamości
in, not in 	operatory przynależności
not , or , and 	operatory logiczne

Podobnie jak w matematyce ważna jest kolejność wykonywania działań. Powyższa tabela pozwala przewidzieć zachowanie programu w zależności od tego jak dane działanie napiszemy.

Weźmy dla przykładu proste działanie:

    3 + 2 * 4

Nie biorąc pod uwagę ważności operatorów działania wykonalibyśmy kolejno od lewej, do prawej. Dało by to nam błędny wynik 20.

Spoglądając na powyższą tabelę wiemy, że symbol iloczynu jest wyżej położony w tabeli niż symbol sumy. Zatem najpierw wykonujemy mnożenie (2 * 4 = 8) następnie sumę (3 + 8 = 11). W ten sposób otrzymujemy właściwy wynik.

Aby nie mieć problemów z kolejnością wykonywania działań, ważnością operatorów i przede wszystkim dbając o czytelność kodu, starajmy się wykorzystywać nawiasy.

    3 + (2 * 4)
    
    
Operatory arytmetyczne


Operator 	Opis 	Użycie
+ 	Suma, symbol dodatni 	x + y
– 	Różnica, symbol ujemny 	-x – y
* 	Iloczyn 	x * y
/ 	Iloraz 	x / y
% 	Modulo – reszta z dzielenia 	x % y
// 	Dzielenie całkowite 	x // y
** 	Potęga 	x ** y

 

Pierwsze cztery operatory służą do zapisu sumy, różnicy, iloczynu oraz ilorazu, czyli podstawowych działań matematycznych. Przejdźmy do pozostałych.
Reszta z dzielenia

Symbol %, czyli modulo – służy nam do wyliczenia reszty z dzielenia przy dzieleniu całkowitym. Zobaczmy do na przykładzie:

    7%3

Reszta z dzielenia 7 przez 3 wynosi 1. Dzieje się tak , gdyż w liczbie 7 zmieszczą się dwie liczby 3, czyli 6. A 7-6 = 1.

Sprawdźmy to na jeszcze jednym przykładzie:

    15%4

Reszta z dzielenia wynosi 3.

 
Dzielenie całkowite

Symbol // służy do wyliczenia, potocznie mówiąc, podłogi z dzielenia. Odcinamy z wyniku dzielenia część ułamkową, pozostaje nam jedynie liczba całkowita.

Przykłady:

    11 // 3

Wynik: 3

    13.0 // 3

Wynik: 4.0

 
Potęga

Symbol ** to symbol potęgowania. Liczba znajdująca się przed tym symbolem zostaje podniesiona do potęgi znajdującej się za tym symbolem.

Przykład:

    3 ** 2

Wynik: 9

Operatory relacyjne
Operator 	Znaczenie 	Wykorzystanie
> 	większe 	x > y
< 	mniejsze 	x < y
== 	równe 	x == y
!= 	różne 	x != y
>= 	większe lub równe 	x >= y
<= 	mniejsze lub równe 	x <= y

 

Wykorzystując operatory relacyjne zadajemy pytanie: Czy?

    x > y

Czy x jest większe od y? Tak zadane pytanie może nam dać jedną z dwóch odpowiedzi TRUE lub FALSE (tak lub nie).

Jeśli zatem przykładowo wykorzystamy:

    6 > 5

Odpowiedź będzie brzmiała: true.

Natomiast w takim przypadku:

    7 <= 4

Odpowiedzią będzie false.

 

Należy zwrócić uwagę na operator porównania, składający się z podwójnego znaku równości.

    4==5

Jest zapytaniem czy 4 jest równe 5 i zwróci wynik false.

Natomiast użycie tylko jednego znaku równości:

    4=5

Jest wykorzystaniem operatora przypisania i wygeneruje błąd. Stanie się tak dlatego, iż próbujemy przypisać wartość 5 do zmiennej o nazwie 4, a jak pamiętamy, nazwa zmiennej nie może rozpoczynać się od cyfry.

Operatory logiczne
Operator 	Opis 	Wykorzystanie
and 	true jeśli obie zmienne true 	x and y
or 	true jeśli którakolwiek zmienna true 	x or y
not 	odwrotność elementu następującego 	not x

 
and

Zwraca wartość true jeśli obie zmienne są prawdziwe.

Zobaczmy to na przykładzie:

    (3 > 1) and (7 > 9)

Lewa strona: 3 > 1 – true

Prawa strona 7 > 9 – false

Zatem wynik całego wyrażenia: false

 

Tabela wyniku operatora and:
x 	y 	x and y
true 	true 	true
true 	false 	false
false 	true 	false
false 	false 	false

 
or

Zwraca wartość true jeśli którakolwiek zmienna ma wartość true.

Zobaczmy to na przykładzie:

    (3 > 1) or (7 > 9)

Lewa strona: 3 > 1 – true

Prawa strona 7 > 9 – false

Zatem wynik całego wyrażenia: true

 

Tabela wyniku operatora and:
x 	y 	x or y
true 	true 	true
true 	false 	true
false 	true 	true
false 	false 	false

 
not

Zwraca odwrotność wyniku wyrażenia.

Przykad:

    not (3 > 1)

Wynik wyrażenia w nawiasie: true

Wynik całości: false

Tabela wyniku operatora not:
x 	not x
true 	false
false 	true

Operatory przynależności
Operator 	Opis 	Wykorzystanie
in 	Sprawdzenie czy wartość jest zawarta w zbiorze, stringu 	3 in [1,2,3,4,5]
not in 	Sprawdzenie czy wartości nie ma w zbiorze, stringu 	3 not in [1,2,3,4,5]

 

Operatorów przynależności używamy by sprawdzić czy interesująca nas wartość znajduje się, bądź nie znajduje się, w danym zbiorze.

Przykładowo mamy daną listę:

    x = [1,2,'kot',4,'pies',6.5]

Sprawdźmy zatem działanie operatorów przynależności.

    5 in x

Wynik: false, gdyż nie ma wartości 5 na naszej liście.

    'kot' in x

Wynik: true, gdyż ciąg znaków kot jest jednym z elementów listy.

    mysz not in x

Wynik: true, gdyż ciąg znaków mysz nie znajduje się na liście.

 

Operatorów przynależności możemy również używać w odniesieniu do ciągów znaków:

    't' in 'Witaj Świecie'

Wynik: true, litera t znajduje się w ciągu znaków Witaj Świecie

    'wiecie' in 'Witaj Świecie'

Wynik: true.

    'Ś' not in 'Witaj Świecie'

Wynik: false, gdyż Ś znajduje się w zadanym ciągu znaków.

